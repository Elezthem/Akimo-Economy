import disnake
from disnake.ext import commands
from utils.databases import UsersDataBase
from random import *

class PaginatorView(disnake.ui.View):
    def __init__(self, embeds, author, footer: bool, timeout=30.0):
        self.embeds = embeds
        self.author = author
        self.footer = footer
        self.timeout = timeout
        self.page = 0
        super().__init__(timeout=self.timeout)

        if self.footer:
            for emb in self.embeds:
                emb.set_footer(text=f'–°—Ç—Ä–∞–Ω–∏—Ü–∞ {self.embeds.index(emb) + 1} –∏–∑ {len(self.embeds)}')

    @disnake.ui.button(label='‚óÄÔ∏è', style=disnake.ButtonStyle.grey)
    async def back(self, button: disnake.ui.Button, interaction: disnake.Interaction):
        if self.author.id == interaction.author.id:
            if self.page == 0:
                self.page = len(self.embeds) - 1
            else:
                self.page -= 1
        else:
            return

        await self.button_callback(interaction)

    @disnake.ui.button(label='‚ñ∂Ô∏è', style=disnake.ButtonStyle.grey)
    async def next(self, button: disnake.ui.Button, interaction: disnake.Interaction):
        if self.author.id == interaction.author.id:
            if self.page == len(self.embeds) - 1:
                self.page = 0
            else:
                self.page += 1
        else:
            return

        await self.button_callback(interaction)

    async def button_callback(self, interaction):
        if self.author.id == interaction.author.id:
            await interaction.response.edit_message(embed=self.embeds[self.page])
        else:
            return await interaction.response.send_message('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–Ω–æ–ø–∫—É!', ephemeral=True)
        

class Economy(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.db = UsersDataBase()

    @commands.slash_command(name='–±–∞–ª–∞–Ω—Å', description='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å')
    async def balance(self, interaction, member: disnake.Member = None):
        await self.db.create_table()
        if not member:
            member = interaction.author
        await self.db.add_user(member)
        user = await self.db.get_user(member)
        embed = disnake.Embed(color=0x2F3136, title=f'–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - {member}')
        embed.add_field(name='ü™ô –ú–æ–Ω–µ—Ç—ã', value=f'```{user[1]}```')
        embed.add_field(name='üíé –ü—Ä–µ–º–∏—É–º –º–æ–Ω–µ—Ç—ã', value=f'```{user[2]}```')
        embed.set_thumbnail(url=member.display_avatar.url)
        await interaction.response.send_message(embed=embed)

    
    @commands.slash_command(name='–∑–∞–±—Ä–∞—Ç—å', description='–ó–∞–±—Ä–∞—Ç—å –¥–µ–Ω—å–≥–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    @commands.has_permissions(administrator=True)
    async def give(self, interaction, member: disnake.Member,
                   amount: int, arg=commands.Param(choices=['–º–æ–Ω–µ—Ç—ã', '–ø—Ä–µ–º–∏—É–º –º–æ–Ω–µ—Ç—ã'])):
        await self.db.create_table()
        await self.db.add_user(member)
        if arg == '–º–æ–Ω–µ—Ç—ã':
            await self.db.update_money(member, -amount, 0)
            embed = disnake.Embed(color=0x2F3136, title=f'–ò–∑—ä—è—Ç–∏–µ –º–æ–Ω–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - {member}')
            embed.description = f'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {interaction.author.mention} –∑–∞–±—Ä–∞–ª –º–æ–Ω–µ—Ç—ã —É {member.mention} {amount} –º–æ–Ω–µ—Ç.'
            embed.set_thumbnail(url=member.display_avatar.url)
        else:
            await self.db.update_money(member, 0, -amount)
            embed = disnake.Embed(color=0x2F3136, title=f'–ò–∑—ä—è—Ç–∏–µ –º–æ–Ω–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - {member}')
            embed.description = f'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {interaction.author.mention} –∑–∞–±—Ä–∞–ª –ø—Ä–µ–º–∏—É–º –º–æ–Ω–µ—Ç—ã —É {member.mention} {amount} –ø—Ä–µ–º–∏—É–º –º–æ–Ω–µ—Ç.'
            embed.set_thumbnail(url=member.display_avatar.url)
        await interaction.response.send_message(embed=embed)

    @commands.slash_command(name='–≤—ã–¥–∞—Ç—å', description='–í—ã–¥–∞—Ç—å –¥–µ–Ω—å–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')
    @commands.has_permissions(administrator=True)
    async def give(self, interaction, member: disnake.Member,
                   amount: int, arg=commands.Param(choices=['–º–æ–Ω–µ—Ç—ã', '–ø—Ä–µ–º–∏—É–º –º–æ–Ω–µ—Ç—ã'])):
        await self.db.create_table()
        await self.db.add_user(member)
        if arg == '–º–æ–Ω–µ—Ç—ã':
            await self.db.update_money(member, amount, 0)
            embed = disnake.Embed(color=0x2F3136, title=f'–í—ã–¥–∞—á–∞ –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é - {member}')
            embed.description = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {interaction.author.mention} –≤—ã–¥–∞–ª {member.mention} {amount} –º–æ–Ω–µ—Ç.'
            embed.set_thumbnail(url=member.display_avatar.url)
        else:
            await self.db.update_money(member, 0, amount)
            embed = disnake.Embed(color=0x2F3136, title=f'–í—ã–¥–∞—á–∞ –ø—Ä–µ–º–∏—É–º –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é - {member}')
            embed.description = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {interaction.author.mention} –≤—ã–¥–∞–ª {member.mention} {amount} –ø—Ä–µ–º–∏—É–º –º–æ–Ω–µ—Ç.'
            embed.set_thumbnail(url=member.display_avatar.url)
        await interaction.response.send_message(embed=embed)


    #@commands.slash_command(name='–ª–∞–π–∫', description='–õ–∞–π–∫–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    #@commands.has_permissions(administrator=True)
    #async def give(self, interaction, member: disnake.Member):
        #await self.db.create_table()
        #await self.db.add_user(member)
        #await self.db.update_likes(member)
        #embed = disnake.Embed(color=0x2F3136, title=f'–õ–∞–π–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - {member}')
        #embed.description = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {interaction.author.mention} –ª–∞–π–∫–Ω—É–ª {member.mention} .'
        #embed.set_thumbnail(url=member.display_avatar.url)
        #await interaction.response.send_message(embed=embed)


    @commands.slash_command(name='–ø–µ—Ä–µ–¥–∞—Ç—å', description='–ü–µ—Ä–µ–¥–∞—Ç—å –º–æ–Ω–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')
    async def pick_up(self, interaction, member: disnake.Member,
                   amount: int, arg=commands.Param(choices=['–º–æ–Ω–µ—Ç—ã', '–ø—Ä–µ–º–∏—É–º –º–æ–Ω–µ—Ç—ã'])):
            embed = disnake.Embed(color=0x2F3136, title=f'–ü–µ—Ä–µ–¥–∞—á–∞ –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é - {member}')
            embed.description = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {interaction.author.mention} –ü–µ—Ä–µ–¥–∞–ª {member.mention} {amount} –º–æ–Ω–µ—Ç.'
            embed.set_thumbnail(url=member.display_avatar.url)
            await self.db.update_money(interaction.author, -amount, 0)
            await self.db.update_money(member, amount, 0)
            await interaction.response.send_message(embed=embed)

    @commands.slash_command(name='—Ä–∞–±–æ—Ç–∞—Ç—å', description='–†–∞–±–æ—Ç–∞—Ç—å')
    @commands.cooldown(1, 1800, commands.BucketType.user)
    async def work(self, interaction):
        workmoney = randint(5, 15)
        await self.db.add_user(interaction.author)
        await self.db.update_money(interaction.author, workmoney, 0)
        embed = disnake.Embed(color=0x2F3136, title=f'–†–∞–±–æ—Ç–∞ - {interaction.author}')
        embed.description = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {interaction.author.mention} –∑–∞—Ä–∞–±–æ—Ç–∞–ª {workmoney} –º–æ–Ω–µ—Ç.'
        embed.set_thumbnail(url=interaction.author.display_avatar.url)
        await interaction.response.send_message(embed=embed)
    

    @commands.slash_command(name='—Ç–æ–ø', description='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
    async def top(self, interaction):
        await self.db.create_table()
        top = await self.db.get_top()
        embeds = []
        loop_count = 0
        n = 0
        text = ''
        for user in top:
            n += 1
            loop_count += 1
            text += f'**{n}.** {self.bot.get_user(user[0])} - {user[1]} ü™ô\n'
            if loop_count % 10 == 0 or loop_count - 1 == len(top) - 1:
                embed = disnake.Embed(color=0x2F3136, title='–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
                embed.description = text
                embed.set_thumbnail(url=interaction.author.display_avatar.url)
                embeds.append(embed)
                text = ''
        view = PaginatorView(embeds, interaction.author, True)
        await interaction.response.send_message(embed=embeds[0], view=view)
        



def setup(bot):
    bot.add_cog(Economy(bot))
